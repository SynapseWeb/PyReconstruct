* High-priority tasks

- [ ] Trace list
- [ ] Expandable (s) / grabbable (g) traces (left click = confirm, right click = cancel)
- [ ] Describe default style we will use
- [ ] Autosave any changes before major operations (e.g., importing transformations)

* Must-do

- [ ] Run on mac / linux machine
- [ ] SWiFT integration (extension?)
- [ ] Investigate using zarr (as "images" and "points")
- [ ] Test dim 6 XML import
- [ ] Stop pyReconstruct from saving changes to welcome series

* Medium-priority tasks

- [ ] Pyside2 v. Pyside6
- [ ] Change "radius" to "diameter" for stamps
- [ ] Setup files (setup.py)
- [ ] Knife tool
- [ ] Reconcropper
- [ ] Image contrast / brightness
- [ ] Z-traces
- [ ] Take a look at SynapseWeb recon2ng
- [ ] Visualize in 3D in Blender / Neuroglancer
- [ ] Cool "3D" or automated tool (Cutting off spines? Import to Blender?)
- [ ] Calibration
- [ ] Add tags to objects
- [ ] Object list
   - [ ] Limit output (regular expressions?)
   - [ ] "Live" object list update (no need to refresh list constantly)
   - [ ] Limit to object tags
   - [ ] Check box / selected?
- [ ] Consider transformation module for upcoming transformational armaggeddon (spelling?) 

* Low-priority tasks

- [ ] In-program Python console
- [ ] Add-on / extension menu / API?
- [ ] Make hotkeys editable by user
- [ ] Give user option of selection number of RAM-loaded images
- [ ] CTRL-c items from the object this for easy pasting into Excel
- [ ] Change stamp into a different shape
- [ ] Sort object list in a variety of ways (by section number, tag, etc.)

* Crazy ideas

- [ ] Be able to view 3D "building" in Blender as you're tracing
- [ ] Export images and traces as SVG file
- [ ] Be able to rotate the section in z inside Reconstruct
- [ ] Compendium of regular expressions

* Things to consider

- (Vijay) Saving points as .obj file / function to export to .obj
- (Vijay) Objects pointing to an obj file instead of sections
- 3D numpy arrays for autoseg
- Export to zarr?
- Boolean arrays to store object data
  
* Completed tasks

- [X] Meet with Vijay (Neuroglancer, automation?)
- [X] GUI module (QT for Python)
- [X] Images + field display
- [X] Image transformations
- [X] Pencil tool
- [X] Pointer / pan-zoom tool
- [X] Trace exteriors
- [X] Simple trace palette
- [X] Stamps
- [X] Click-tracing
- [X] Open line and pencil tracing
- [X] Correct merge tool
- [X] Ctrl+H to hide selected traces
- [X] Shift+H to toggle on/off hide all traces
- [X] Object list
   1) [X] Start / End
   2) [X] Count 
   3) [X] Flat area
   4) [X] Surface area? (Different algorithms?)
   5) [X] Volume
- [X] Section thickness
- [X] CTRL-s hotkey to save (Patrick request)
- [X] JSON -> XML -> JSON
- [X] Progress bars
- [X] Undo/ redo functions
- [X] Add dim 6 handling for xml import (NOT TESTED YET)
- [X] Find First function in obj list
- [X] Find Last function in obj list

* Lab meeting

** Intro (Michael)

- What we've been doing
- Original goals
   - Wanted to keep the spirit of "legacy" Reconstruct (simplicity, be able to go back and forth)
   - Capitalize on work already done in the lab (Larry and Michael)
   - Incorporate this work with autosegmentation efforts (Vijay)
- First demo (shut up) / then explanations

** Demo (Julian)

- Open py-reconstruct and start new series
  
- Demo tools
  
   + Trace object
   + Stamp
   + Scalpel
   + Undo / redo
   + Merge
   + Pan / Zoom
   + Obj list / autorefreshing
   + Importing "SWiFT" transformations
   + Exporting back to legacy Reconstruct
   + Importing a series from legacy Reconstruct
   + Imports zarr files
     
- Explanation (think about differences with legacy Reconstruct)
  
   + PyQT, numpy, openCV
   + JSON structure (XML contrasted with the same JSON)
   + Transformations
   + Point storage (consider simplifying trace points on series import)
   + Merge differences
   + Things are good about Reconstruct
     
** Summary / Future directions (Michael)

- Advantages Py-reconstruct
  
  + Not fixed (adaptable) / Reconstruct wish-list (e.g., scalpel, autorefreshing object list, redo, objects tags)
  + Extensible / customizable (new tools on the fly)
  + Cross-platform (Run in Linux)
  + Integration with team Vijay
     
- Export to zarr (incorporate Vijay code)
  
- 3D in Blender
  
- API

- VC with git / automatic backing up

- Automatic log lifes (e.g., with insertion of transformations)

- What have we learned through this process

  - VC

  - Working together as a team

  - Managing dependencies

  - Linux

  - Programming skills
