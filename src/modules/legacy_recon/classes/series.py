class Series(object):
    """ Class representing a RECONSTRUCT Series.
    """
    def __init__(self, **kwargs):
        """ Set instance attributes with args and kwargs.
        """
        self.index = kwargs.get("index")
        self.viewport = kwargs.get("viewport")
        self.units = kwargs.get("units")
        self.autoSaveSeries = kwargs.get("autoSaveSeries")
        self.autoSaveSection = kwargs.get("autoSaveSection")
        self.warnSaveSection = kwargs.get("warnSaveSection")
        self.beepDeleting = kwargs.get("beepDeleting")
        self.beepPaging = kwargs.get("beepPaging")
        self.hideTraces = kwargs.get("hideTraces")
        self.unhideTraces = kwargs.get("unhideTraces")
        self.hideDomains = kwargs.get("hideDomains")
        self.unhideDomains = kwargs.get("unhideDomains")
        self.useAbsolutePaths = kwargs.get("useAbsolutePaths")
        self.defaultThickness = kwargs.get("defaultThickness")
        self.zMidSection = kwargs.get("zMidSection")
        self.thumbWidth = kwargs.get("thumbWidth")
        self.thumbHeight = kwargs.get("thumbHeight")
        self.fitThumbSections = kwargs.get("fitThumbSections")
        self.firstThumbSection = kwargs.get("firstThumbSection")
        self.lastThumbSection = kwargs.get("lastThumbSection")
        self.skipSections = kwargs.get("skipSections")
        self.displayThumbContours = kwargs.get("displayThumbContours")
        self.useFlipbookStyle = kwargs.get("useFlipbookStyle")
        self.flipRate = kwargs.get("flipRate")
        self.useProxies = kwargs.get("useProxies")
        self.widthUseProxies = kwargs.get("widthUseProxies")
        self.heightUseProxies = kwargs.get("heightUseProxies")
        self.scaleProxies = kwargs.get("scaleProxies")
        self.significantDigits = kwargs.get("significantDigits")
        self.defaultBorder = kwargs.get("defaultBorder")
        self.defaultFill = kwargs.get("defaultFill")
        self.defaultMode = kwargs.get("defaultMode")
        self.defaultName = kwargs.get("defaultName")
        self.defaultComment = kwargs.get("defaultComment")
        self.listSectionThickness = kwargs.get("listSectionThickness")
        self.listDomainSource = kwargs.get("listDomainSource")
        self.listDomainPixelsize = kwargs.get("listDomainPixelsize")
        self.listDomainLength = kwargs.get("listDomainLength")
        self.listDomainArea = kwargs.get("listDomainArea")
        self.listDomainMidpoint = kwargs.get("listDomainMidpoint")
        self.listTraceComment = kwargs.get("listTraceComment")
        self.listTraceLength = kwargs.get("listTraceLength")
        self.listTraceArea = kwargs.get("listTraceArea")
        self.listTraceCentroid = kwargs.get("listTraceCentroid")
        self.listTraceExtent = kwargs.get("listTraceExtent")
        self.listTraceZ = kwargs.get("listTraceZ")
        self.listTraceThickness = kwargs.get("listTraceThickness")
        self.listObjectRange = kwargs.get("listObjectRange")
        self.listObjectCount = kwargs.get("listObjectCount")
        self.listObjectSurfarea = kwargs.get("listObjectSurfarea")
        self.listObjectFlatarea = kwargs.get("listObjectFlatarea")
        self.listObjectVolume = kwargs.get("listObjectVolume")
        self.listZTraceNote = kwargs.get("listZTraceNote")
        self.listZTraceRange = kwargs.get("listZTraceRange")
        self.listZTraceLength = kwargs.get("listZTraceLength")
        self.borderColors = kwargs.get("borderColors")
        self.fillColors = kwargs.get("fillColors")
        self.offset3D = kwargs.get("offset3D")
        self.type3Dobject = kwargs.get("type3Dobject")
        self.first3Dsection = kwargs.get("first3Dsection")
        self.last3Dsection = kwargs.get("last3Dsection")
        self.max3Dconnection = kwargs.get("max3Dconnection")
        self.upper3Dfaces = kwargs.get("upper3Dfaces")
        self.lower3Dfaces = kwargs.get("lower3Dfaces")
        self.faceNormals = kwargs.get("faceNormals")
        self.vertexNormals = kwargs.get("vertexNormals")
        self.facets3D = kwargs.get("facets3D")
        self.dim3D = kwargs.get("dim3D")
        self.gridType = kwargs.get("gridType")
        self.gridSize = kwargs.get("gridSize")
        self.gridDistance = kwargs.get("gridDistance")
        self.gridNumber = kwargs.get("gridNumber")
        self.hueStopWhen = kwargs.get("hueStopWhen")
        self.hueStopValue = kwargs.get("hueStopValue")
        self.satStopWhen = kwargs.get("satStopWhen")
        self.satStopValue = kwargs.get("satStopValue")
        self.brightStopWhen = kwargs.get("brightStopWhen")
        self.brightStopValue = kwargs.get("brightStopValue")
        self.tracesStopWhen = kwargs.get("tracesStopWhen")
        self.areaStopPercent = kwargs.get("areaStopPercent")
        self.areaStopSize = kwargs.get("areaStopSize")
        self.ContourMaskWidth = kwargs.get("ContourMaskWidth")
        self.smoothingLength = kwargs.get("smoothingLength")
        self.mvmtIncrement = kwargs.get("mvmtIncrement")
        self.ctrlIncrement = kwargs.get("ctrlIncrement")
        self.shiftIncrement = kwargs.get("shiftIncrement")
        # Non-attributes
        self.name = kwargs.get("name")
        self.path = kwargs.get("path")
        self.contours = kwargs.get("contours", [])
        self.zcontours = kwargs.get("zcontours", [])
        self.sections = kwargs.get("sectons", {})

    def attributes(self):
        """ Return a dict of this Series" attributes.
        """
        ignore = ["name", "path", "contours", "zcontours", "sections"]
        attributes = {k: v for k, v in self.__dict__.iteritems() if k not in ignore}
        return attributes
